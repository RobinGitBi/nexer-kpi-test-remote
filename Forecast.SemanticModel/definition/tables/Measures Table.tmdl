table 'Measures Table'
	lineageTag: 988be8a7-76ea-492d-9ce2-ac05d4ea600e

	measure '4. P&L_Cal_ContextTransitionToMonth' = ```
			
			    SUMX(
			        VALUES('Calendar'[Year Month]), [3. P&L_Cal_YtdToMonth]
			    )/1000
			```
		formatString: #,0
		displayFolder: P&L Currency Conversions
		lineageTag: 8d0ba334-38ea-48ca-bc2d-0893bafcb020

	measure '3. P&L_Cal_YtdToMonth' =
			
			IF(
			        AND(SELECTEDVALUE('Calendar'[Month Number]) >1, [2. P&L_Cal_CurrencyConversion Sales (YTD)] <> 0),
			        [2. P&L_Cal_CurrencyConversion Sales (YTD)]- CALCULATE(
			            [2. P&L_Cal_CurrencyConversion Sales (YTD)],
			            PREVIOUSMONTH('Calendar'[Date])
			            ),
			        [2. P&L_Cal_CurrencyConversion Sales (YTD)]
			    )
		displayFolder: P&L Currency Conversions
		lineageTag: d11e3bb0-f4d3-4998-beea-e0b15d765267

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '2. P&L_Cal_CurrencyConversion Sales (YTD)' =
			
			IF (
			    HASONEVALUE ( 'Reporting Currency'[SourceCurrency] ),
			    VAR ForecastVersion = SELECTEDVALUE('P&L'[Actuality])
			    VAR AggregatedSalesInCurrency =
			        ADDCOLUMNS (
			            SUMMARIZE (
			                'P&L',
			                'Calendar'[Year Month],    -- Monthly granularity
			                'Source Currency'[CurrencyId]
			            ),
			            "@SalesAmount", CALCULATE([1. P&L_Cal_AmountYtd], 'P&L'[Actuality] = ForecastVersion),
			            "@Rate", CALCULATE ( SELECTEDVALUE ( 'Monthly Exchange Rates'[Rate]),
			            'Monthly Exchange Rates'[Actuality] = ForecastVersion,
			            'Monthly Exchange Rates'[CurrencyType] = "M")
			        )
			    VAR Result =
			        SUMX (
			            AggregatedSalesInCurrency,
			            IF (
			                NOT ( ISBLANK ( [@Rate] ) ),
			                [@SalesAmount] / [@Rate],
			                "Missing Value"
			            )
			            )
			    RETURN
			        Result)
		displayFolder: P&L Currency Conversions
		lineageTag: 22c4c3a5-a52c-4f88-953b-088a54714dbd

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '1. P&L_Cal_AmountYtd' = ```
			
			    CALCULATE(
			        SUMX(
			            'P&L', 
			            'P&L'[ReportingAmount]
			        ), 
			        DATESYTD('Calendar'[Date])
			    )
			```
		displayFolder: P&L Currency Conversions
		lineageTag: dfd305aa-9416-47af-8544-7da2315d5a70

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Unbilable Hours' = ```
			
			VAR SelectedActuality = SELECTEDVALUE('ActualityOrgin'[ActualityOrigin])
			
			RETURN
			
			// IF(
			    // SelectedActuality = "AC",
			    [Presence Hours] - [Billable Hours]
			    // ,
			    // CALCULATE(
			    //     SUMX(
			    //         'Project Transactions',
			    //         'Project Transactions'[TotalHours] * 'Project Transactions'[UhrFc]
			    //     ),
			    //    KEEPFILTERS(NOT 'Employment Type'[EmploymentTypeId] IN {4,5}) 
			    // )
			// )
			```
		displayFolder: HR
		lineageTag: 91971fbf-6770-47c6-bfa3-2f007ae3db89

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure UHR = ```
			
			
			    DIVIDE([Unbilable Hours] , [Presence Hours])
			```
		formatString: 0.0\ %;-0.0\ %;0.0\ %
		displayFolder: HR
		lineageTag: cb99a819-7ea9-411a-8f99-44fb440c4aa0

	measure 'Total Hours' = ```
			
			    
			    //VAR SelectedActuality = SELECTEDVALUE ( ActualityOrgin[ActualityOrigin] )
			    
			    //RETURN
			
			VAR AcTotalHours =
			        CALCULATE (
			            SUM ( 'Project Transactions'[TotalHours] ),
			            NOT 'Project Transactions'[EmploymentTypeID] in {4,5}
			        )
			
			
			VAR FcTotalHours = 
			        CALCULATE (
			            SUM ( 'Project Transactions'[TotalHours] ), USERELATIONSHIP('Project Transactions'[AdjustedFunction2], 'Function'[FunctionId]),
			            NOT 'Project Transactions'[EmploymentTypeID] in {4,5}
			        )
			
			VAR Result = IF(SELECTEDVALUE('Project Transactions'[Actuality] ) = "AC", AcTotalHours, FcTotalHours)
			
			RETURN Result
			
			```
		formatString: #,0
		displayFolder: HR
		lineageTag: 71973251-aed1-458e-8a4c-ed99d36a08dd

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Billable Hours' = ```
			
			
			
			 VAR AcBillableHours = 
			 
			    CALCULATE(
			        SUM('Project Transactions'[TotalHours]),
			        'Project Transactions'[ProjectClassType] = 1,
			        'Project Transactions'[NonChargableId] = 0,
			        KEEPFILTERS(NOT 'Project Transactions'[EmploymentTypeId] IN {4,5})
			    )
			   
			
			   VAR FcBillableHours = 
			CALCULATE(
			SUM('Project Transactions'[TotalHours]),
			USERELATIONSHIP('Project Transactions'[AdjustedFunction2], 'Function'[FunctionId]),
			// FILTER('Project Transactions', [TotalRevenue] <> 0),
			KEEPFILTERS('Project Transactions'[NonChargableId] = 0),
			            KEEPFILTERS(
			                NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			            )
			        )
			
			VAR Result = IF(SELECTEDVALUE('Project Transactions'[Actuality] ) = "AC", AcBillableHours, FcBillableHours)
			
			RETURN IF(Result <> 0 , Result)
			
			 
			// VAR SelectedActuality = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			 
			// RETURN
			 
			// IF(
			//      SelectedActuality = "AC",
			//     CALCULATE(
			//         SUM('Project Transactions'[TotalHours]),
			//         'Project Transactions'[ProjectClassType] = 1,
			//         'Project Transactions'[NonChargableId] = 0,
			//         KEEPFILTERS(NOT 'Project Transactions'[EmploymentTypeId] IN {4,5})
			//     ),
			   
			//         CALCULATE(
			//             SUMX(
			//                 'Project Transactions',
			//                 'Project Transactions'[TotalHours] * (1 - 'Project Transactions'[UhrFc])
			//             ),
			//             KEEPFILTERS(
			//                 NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			//             ),
			//              KEEPFILTERS(LEN('Project Transactions'[TimeCode]) < 4)
			//         )
			// )
			
			
			
			
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			 
			// RETURN
			 
			// IF(
			//      SelectedActuality = "AC",
			//     CALCULATE(
			//         SUM('Project Transactions'[TotalHours]),
			//         'Project Transactions'[ProjectClassType] = 1,
			//         'Project Transactions'[NonChargableId] = 0,
			//         KEEPFILTERS(NOT 'Project Transactions'[EmploymentTypeId] IN {4,5})
			//     ),
			   
			// CALCULATE(
			// SUM('Project Transactions'[TotalHours]),
			// FILTER('Project Transactions', [TotalRevenue] <> 0),
			//             KEEPFILTERS(
			//                 NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			//             )
			//         )
			// )
			```
		formatString: #,0
		displayFolder: HR
		lineageTag: e55bea96-4911-422c-8361-499c4485a3c3

		annotation PBI_FormatHint = {"isDecimal":true}

	measure Absence = ```
			
			    DIVIDE(([Total Hours] - [Presence Hours]) ,[Total Hours])
			```
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: HR
		lineageTag: 0849e2d6-09e0-42a8-84c5-2fb8cd882cb6

	measure EBIT = ```
			
			    VAR TotalRevenue = 
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "30 Total Revenues"
			        )
			    VAR TotalCOGS = 
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "40 Total Direct Costs"
			        )
			    VAR TotalOverhead = 
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "50 Total Overhead Costs"
			        )
			RETURN
			TotalRevenue + TotalCOGS + TotalOverhead
			```
		formatString: #,0
		displayFolder: Financials
		lineageTag: 27b829f2-0f4d-498b-8c93-1af55f6bafa4

	measure 'EBIT %' = ```
			
			    DIVIDE(
			        [EBIT],  
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "30 Total Revenues"
			        ))
			```
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: Financials
		lineageTag: 6384041d-981c-4eea-9298-b431f5c8359f

	measure PL_Actual_vs_Origin = ```
			
			VAR SelectedMonth = SELECTEDVALUE('Calendar'[Year Month])
			VAR SelectedMonthAsDate = DATE(LEFT(SelectedMonth, 4), RIGHT(SelectedMonth, 2), 1)
			VAR PriorYearMonth = FORMAT(EDATE(SelectedMonthAsDate, -12), "YYYYMM")
			VAR CurrentMonth = FORMAT(TODAY(), "YYYYMM")
			VAR MostRecentDate = FORMAT(
			    CALCULATE(
			        MAX('Calendar'[Date]),
			        ALLSELECTED('Calendar')
			    ),
			    "YYYYMM"
			)
			VAR SelectedMonthFormatted = FORMAT(MAX('Calendar'[Date]), "YYYYMM")
			
			RETURN
			IF (
			    COUNTROWS(
			        FILTER(
			            'P&L',
			            RIGHT('P&L'[ActualityOrigin_new], 6) IN VALUES('Calendar'[Year Month])
			        )
			    ) > 0,
			    CALCULATE(
			        [4. P&L_Cal_ContextTransitionToMonth],
			        KEEPFILTERS('P&L'[ActualityOrigin_new] <> "AC")
			    ),
			    IF (
			        SelectedMonthFormatted > CurrentMonth && SelectedMonthFormatted <= MostRecentDate,
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'P&L'[Actuality] <> "AC",
			            FORMAT('P&L'[ActualityDate], "YYYYMM") = PriorYearMonth
			        ),
			        IF (
			            SelectedMonthFormatted < CurrentMonth,
			            CALCULATE(
			                [4. P&L_Cal_ContextTransitionToMonth],
			                KEEPFILTERS('P&L'[ActualityOrigin_new] = "AC")
			            ),
			            BLANK()
			        )
			    )
			)
			
			```
		formatString: #,0
		displayFolder: Financials
		lineageTag: 9d1c8189-db60-4a0a-9a8e-0282cb380acb

		annotation PBI_FormatHint = {"isDecimal":true}

	measure SelectedUnit = ```
			
			VAR SelectedValues = DISTINCT('Organisation Manual'[Organisation])
			VAR CountSelected = COUNTROWS(SelectedValues)
			RETURN
			    IF(
			        ISFILTERED('Organisation Manual'[Organisation]),
			        SWITCH(
			            TRUE(),
			            CountSelected = 1 || CountSelected = 2,
			                CONCATENATEX(
			                    SelectedValues,
			                    'Organisation Manual'[Organisation],
			                    ", ",
			                    'Organisation Manual'[Organisation],
			                    ASC
			                ),
			            CountSelected > 2,
			                CONCATENATEX(
			                    TOPN(2, SelectedValues, 'Organisation Manual'[Organisation], ASC),
			                    'Organisation Manual'[Organisation],
			                    ", ",
			                    'Organisation Manual'[Organisation],
			                    ASC
			                ) & " and more"
			        ),
			        "All BL/Chairman Selected"
			    )
			
			```
		lineageTag: 91737438-fcb7-4f8e-bb57-85fb42941d44

	measure 'Selected Year and Months' = ```
			
			VAR SelectedYear = SELECTEDVALUE('Calendar'[Year])
			VAR YearCount = COUNTROWS(VALUES('Calendar'[Year]))
			VAR SelectedMonths =
			    FILTER(
			        VALUES('Calendar'),
			        'Calendar'[Year] = SelectedYear
			    )
			VAR MonthTable =
			    ADDCOLUMNS(
			        SUMMARIZE(SelectedMonths, 'Calendar'[Month], 'Calendar'[Month Number]),
			        "MonthName", 'Calendar'[Month]
			    )
			VAR MonthList =
			    CONCATENATEX(
			        MonthTable,
			        [MonthName],
			        ", ",
			        [Month Number],
			        ASC
			    )
			RETURN
			    IF(
			        YearCount = 1,
			        SelectedYear & ": " & MonthList,
			        "Select a single year"
			    )
			
			```
		lineageTag: e5f3a4ac-ec84-4a6b-873b-1bb63aaf6528

	measure 'Presence Hours' = ```
			
			
			VAR 
			AcPresenceHours =
			    CALCULATE (
			            SUM ( 'Project Transactions'[TotalHours] ),
			            KEEPFILTERS('Project Transactions'[ProjectClassType] in {1,2}),
			            NOT 'Project Transactions'[EmploymentTypeID] in {4,5})
			
			VAR FcPresenceHours = 
			CALCULATE(SUM('Project Transactions'[TotalHours]), KEEPFILTERS('Function'[FunctionId] in { "10", "20"}), KEEPFILTERS('Project Transactions'[ProjectClassType] in({1,2})), USERELATIONSHIP('Project Transactions'[AdjustedFunction2], 'Function'[FunctionId])) 
			// CALCULATE(SUM('Project Transactions'[TotalHours]), KEEPFILTERS('Function'[FunctionId] = "10"), KEEPFILTERS('Project Transactions'[ProjectClassType] in({1,2}))) 
			//  + CALCULATE(SUM('Project Transactions'[TotalHours]),KEEPFILTERS('Project Transactions'[AdjustedFunction] = "20" ), KEEPFILTERS('Project Transactions'[ProjectClassType] = 1))
			
			VAR Result1 = IF(SELECTEDVALUE('Project Transactions'[Actuality] ) = "AC", AcPresenceHours, FcPresenceHours)
			
			VAR Result2 = IF(Result1 <> 0,Result1)
			
			
			
			RETURN Result2
			```
		formatString: #,0
		displayFolder: HR
		lineageTag: e80bc049-9151-4928-a9ae-6c68bff822d1

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Total Direct Costs' =
			IF(SELECTEDVALUE('Project Transactions'[Actuality]) = "AC", CALCULATE([4. ProjectCost_Cal_ContextTransitionToMonth] , USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId]), KEEPFILTERS('Project Transactions'[AdjustedFunction] = "10"), KEEPFILTERS('Project Transactions'[ProjectClassType] in { 1 }), KEEPFILTERS('Project Transactions'[EmploymentTypeId] <4)),
			 CALCULATE([4. ProjectCost_Cal_ContextTransitionToMonth], USERELATIONSHIP('Project Transactions'[AdjustedFunction2], 'Function'[FunctionId]), KEEPFILTERS('Project Transactions'[ProjectClassType] in { 1 }), KEEPFILTERS('Project Transactions'[EmploymentTypeId] in {1,2,3})))
		displayFolder: HR
		lineageTag: 011c4945-1415-4e52-ade5-eeedaccb201b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure FTE = ```
			
			SUMX (
			    VALUES ( 'Project Transactions'[ProjectEmployeeId] ),
			    VAR FTECalculation =
			        CALCULATE (
			            DIVIDE (
			                CALCULATE (
			                    SUM ( 'Project Transactions'[TotalHours] ),
			                    FILTER (
			                        ALL ( 'Project Transactions'[TimeCode] ),
			                        
			                        ISBLANK ( 'Project Transactions'[TimeCode] )
			                            // || 'Project Transactions'[TimeCode] <> "" 
			                            ||
			                             'Project Transactions'[TimeCode]
			                            IN {
			                                "400",
			                                "401",
			                                "402",
			                                "403",
			                                "8020",
			                                "8040",
			                                "8060",
			                                "8080",
			                                "9900",
			                                "9911",
			                                "9915",
			                                "9916",
			                                "9920",
			                                "9922",
			                                "9924",
			                                "9930",
			                                "9935",
			                                "9940",
			                                "9950",
			                                "9960",
			                                "9980",
			                                "9982",
			                                ""
			                            }
			                    ),            
			                    KEEPFILTERS ( NOT 'Employment Type'[EmploymentTypeId] IN { 4, 5 } ),
			            KEEPFILTERS ( 'Project Transactions'[Actuality] = "AC" ),
			            // KEEPFILTERS('Project Transactions'[TransactionType] = 1),
			            KEEPFILTERS ( 'Project Transactions'[OverTime] = 0 ),
			            'Calendar'[Year Month] = MAX ( 'Calendar'[Year Month] )
			                )
			                ,
			                CALCULATE(SUM ( 'Project Transactions'[NormalWorkingHoursMonthly] )
			                ,
			                CROSSFILTER('Project Transactions'[AdjustedFunction], 'Function'[FunctionId], none)
			                )
			            )
			
			        )
			        +
			                    CALCULATE(
			    SUM('Project Transactions'[FteFc]), KEEPFILTERS(not 'Project Transactions'[EmploymentTypeId] in {4,5}))
			    //  KEEPFILTERS(
			    //         NOT 'Employment Type'[EmploymentTypeId] IN {4,5}
			    //     ), trans)
			    RETURN
			        IF ( FTECalculation <> 0, FTECalculation )
			)
			
			```
		formatString: 0.0
		displayFolder: HR
		lineageTag: 8355551f-746a-4846-95e9-3edb8f73ea4f

	measure OH% =
			
			
			VAR  FcFte = CALCULATE(SUM('Project Transactions'[FteFc]), KEEPFILTERS('Employment Type'[EmploymentTypeId] <4))
			
			
			VAR FcFteProduction = CALCULATE(SUM('Project Transactions'[FteFc]), KEEPFILTERS('Employment Type'[EmploymentTypeId] <4), KEEPFILTERS('Function'[FunctionId] = "20"), USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId])
			, 'Function'[FunctionId])
			
			
			VAR FcOhPerc = DIVIDE( FcFteProduction, FcFte)
			
			VAR Result = if(SELECTEDVALUE('Project Transactions'[Actuality]) = "AC", DIVIDE(CALCULATE([FTE], KEEPFILTERS('Function'[FunctionId] =  "20")), [FTE]), FcOhPerc )
			
			
			RETURN Result
		formatString: 0.0\ %;-0.0\ %;0.0\ %
		displayFolder: HR
		lineageTag: bb2813e4-7226-47f7-8765-77a986ac7449

	measure 'Correct Revenue' = ```
			
			
			VAR AcRevenue = 
			CALCULATE([4. ProjectRevenue_Cal_ContextTransitionToMonth], 
			 USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId]),
			  KEEPFILTERS('Project Transactions'[AdjustedFunction] = "10")
			, KEEPFILTERS('Project Transactions'[ProjectClassType] = 1), KEEPFILTERS('Project Transactions'[EmploymentTypeId] <4))
			
			
			VAR FcRevenue = 
			CALCULATE([4. ProjectRevenue_Cal_ContextTransitionToMonth], 
			 USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId]),
			  KEEPFILTERS('Project Transactions'[AdjustedFunction2] = "10")
			, KEEPFILTERS('Project Transactions'[ProjectClassType] = 1), KEEPFILTERS('Project Transactions'[EmploymentTypeId] in {1,2,3}))
			
			VAR Result = IF(SELECTEDVALUE('Project Transactions'[Actuality] ) = "AC", AcRevenue, FcRevenue)
			
			RETURN Result
			
			```
		formatString: 0
		displayFolder: HR
		lineageTag: 0e1daaa6-ab15-4133-a0ee-1326643b78cf

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Price Per Hour' = ```
			DIVIDE(CALCULATE([Correct Revenue], 
			KEEPFILTERS('Project Transactions'[TransactionType] = 1)),
			// FILTER('Project Transactions', [Correct Revenue] <> 0)),
			 [Billable Hours])
			```
		formatString: 0
		displayFolder: HR
		lineageTag: 265454e2-70a3-4e8c-a767-df320ff66a9f

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Correct Gross Margin %' =
			
			
			VAR Revenue = [Correct Revenue]
			
			VAR GrossProfit = [Correct Revenue]+[Total Direct Costs]
			
			VAR GrossMarginPerc = DIVIDE(GrossProfit, [Correct Revenue])
			
			VAR Result = GrossMarginPerc
			
			RETURN GrossMarginPerc
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		displayFolder: HR
		lineageTag: 03a85fd7-bdcd-4794-8713-8fcde3bccb48

	measure 'Correct Gross Profit 1 Hours' =
			
			VAR GrossProfit =
			    CALCULATE (
			        [4. ProjectRevenue_Cal_ContextTransitionToMonth] + [4. ProjectCost_Cal_ContextTransitionToMonth],
			        KEEPFILTERS ( 'Project Transactions'[TransactionType] = 1 ),
			        KEEPFILTERS ( 'Project Transactions'[EmploymentTypeId] IN { 1, 2, 3 } ),
			        KEEPFILTERS ( 'Project Transactions'[ProjectClassType] = 1 )
			    )
			VAR HourSubstraction =
			    CALCULATE (
			        [4. ProjectCost_Cal_ContextTransitionToMonth],
			        KEEPFILTERS ( 'Project Transactions'[ExpenseCode] = "98" )
			    )
			VAR Result = GrossProfit + HourSubstraction
			RETURN
			    Result
		formatString: #,0
		displayFolder: HR
		lineageTag: 7d112286-6332-4025-a3de-463db7b1bf92

	measure 'Gross Margin Hours %' =
			
			DIVIDE (
			    [Correct Gross Profit 1 Hours],
			    CALCULATE (
			        [Correct Revenue],
			        KEEPFILTERS ( 'Project Transactions'[TransactionType] = 1 )
			    )
			)
		formatString: 0.0\ %;-0.0\ %;0.0\ %
		displayFolder: HR
		lineageTag: 78898a1f-bb11-40f1-964c-cfc92c973994

	measure '1. ProjectCost_Cal_AmountYtd' = ```
			
			    CALCULATE(
			        SUMX(
			            'Project Transactions', 
			            'Project Transactions'[TotalCost]
			        ), 
			        DATESYTD('Calendar'[Date])
			    )
			```
		displayFolder: KPIs
		lineageTag: f1f35301-f9f7-48d8-bb80-d19099a52748

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '2. ProjectCost_Cal_CurrencyConversion Sales (YTD)' =
			
			IF (
			    HASONEVALUE ( 'Reporting Currency'[SourceCurrency] ),
			    VAR ForecastVersion = SELECTEDVALUE('Project Transactions'[Actuality])
			    VAR AggregatedSalesInCurrency =
			        ADDCOLUMNS (
			            SUMMARIZE (
			                'Project Transactions',
			                'Calendar'[Year Month],    -- Monthly granularity
			                'Source Currency'[CurrencyId]
			            ),
			            "@SalesAmount", CALCULATE([1. ProjectCost_Cal_AmountYtd], 'Project Transactions'[Actuality] = ForecastVersion),
			            "@Rate", CALCULATE ( SELECTEDVALUE ( 'Monthly Exchange Rates'[Rate]),
			            'Monthly Exchange Rates'[Actuality] = ForecastVersion,
			            'Monthly Exchange Rates'[CurrencyType] = "M")
			        )
			    VAR Result =
			        SUMX (
			            AggregatedSalesInCurrency,
			            IF (
			                NOT ( ISBLANK ( [@Rate] ) ),
			                [@SalesAmount] / [@Rate],
			                "Missing Value"
			            )
			            )
			    RETURN
			        Result)
		displayFolder: KPIs
		lineageTag: 988d8814-b755-4630-bd90-577ad768cd81

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '3. ProjectCost_Cal_YtdToMonth' =
			
			IF(
			        AND(SELECTEDVALUE('Calendar'[Month Number]) >1, [2. ProjectCost_Cal_CurrencyConversion Sales (YTD)] <> 0),
			        [2. ProjectCost_Cal_CurrencyConversion Sales (YTD)]- CALCULATE(
			            [2. ProjectCost_Cal_CurrencyConversion Sales (YTD)],
			            PREVIOUSMONTH('Calendar'[Date])
			            ),
			        [2. ProjectCost_Cal_CurrencyConversion Sales (YTD)]
			    )
		displayFolder: KPIs
		lineageTag: b8f1c79b-e2ff-4d6d-a50c-ea9d46c2ea31

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '4. ProjectCost_Cal_ContextTransitionToMonth' = ```
			
			    SUMX(
			        VALUES('Calendar'[Year Month]), [3. ProjectCost_Cal_YtdToMonth]
			    )
			```
		displayFolder: KPIs
		lineageTag: 50295c2c-751a-4ee8-8a0d-28795a027fc0

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '1. ProjectRevenue_Cal_AmountYtd' = ```
			
			    CALCULATE(
			        SUMX(
			            'Project Transactions', 
			            'Project Transactions'[TotalRevenue]
			        ), 
			        DATESYTD('Calendar'[Date])
			    )
			```
		displayFolder: KPIs
		lineageTag: d8a91e58-cdf8-4c2d-b62c-d961d563aad5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)' =
			
			IF (
			    HASONEVALUE ( 'Reporting Currency'[SourceCurrency] ),
			    VAR ForecastVersion = SELECTEDVALUE('Project Transactions'[Actuality])
			    VAR AggregatedSalesInCurrency =
			        ADDCOLUMNS (
			            SUMMARIZE (
			                'Project Transactions',
			                'Calendar'[Year Month],    -- Monthly granularity
			                'Source Currency'[CurrencyId]
			            ),
			            "@SalesAmount", CALCULATE([1. ProjectRevenue_Cal_AmountYtd], 'Project Transactions'[Actuality] = ForecastVersion),
			            "@Rate", CALCULATE ( SELECTEDVALUE ( 'Monthly Exchange Rates'[Rate]),
			            'Monthly Exchange Rates'[Actuality] = ForecastVersion,
			            'Monthly Exchange Rates'[CurrencyType] = "M")
			        )
			    VAR Result =
			        SUMX (
			            AggregatedSalesInCurrency,
			            IF (
			                NOT ( ISBLANK ( [@Rate] ) ),
			                [@SalesAmount] / [@Rate],
			                "Missing Value"
			            )
			            )
			    RETURN
			        Result)
		displayFolder: KPIs
		lineageTag: c763d37f-b6ca-41b3-b201-6a61776f8b69

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '3. ProjectRevenue_Cal_YtdToMonth' =
			
			IF(
			        AND(SELECTEDVALUE('Calendar'[Month Number]) >1, [2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)] <> 0),
			        [2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)]- CALCULATE(
			            [2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)],
			            PREVIOUSMONTH('Calendar'[Date])
			            ),
			        [2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)]
			    )
		displayFolder: KPIs
		lineageTag: 03012860-eac3-49d9-850e-06afcbf6f424

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '4. ProjectRevenue_Cal_ContextTransitionToMonth' = ```
			
			    SUMX(
			        VALUES('Calendar'[Year Month]), [3. ProjectRevenue_Cal_YtdToMonth]
			    )
			```
		displayFolder: KPIs
		lineageTag: c6c2a72e-3af0-4fbf-bd11-86aba035a1bc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure SlicerFilter_CompaniesWithNoValues = INT( NOT ISEMPTY('P&L'))
		formatString: 0
		lineageTag: 9bb93c32-d7dd-41e4-857b-1f655196a6dc

	measure TextMeasure = ```
			
			
			VAR ActualityTxt   = SELECTEDVALUE ( ActualityOrgin[ActualityOrigin], "Multiple Versions" )
			VAR CurrTxt        = SELECTEDVALUE ( 'Reporting Currency'[SourceCurrency], "—" )
			VAR MinMonthIdx    = MIN ( 'Calendar'[Month Number] )
			VAR MaxMonthIdx    = MAX ( 'Calendar'[Month Number] )
			VAR SelectedMonths = COUNTROWS ( VALUES ( 'Calendar'[Month Number] ) )
			VAR ExpectedMonths = MaxMonthIdx - MinMonthIdx + 1
			VAR IsContiguous   = SelectedMonths = ExpectedMonths
			RETURN
			IF (
			    SelectedMonths = 0,
			    "No month selected",
			    IF (
			        IsContiguous,
			        "Now Presenting " & ActualityTxt & " in K" & CurrTxt & " "
			            & FORMAT ( MIN ( 'Calendar'[Date] ), "yyyy-MM-dd" ) & " - "
			            & FORMAT ( MAX ( 'Calendar'[Date] ), "yyyy-MM-dd" ),
			        "Now Presenting " & ActualityTxt & " in K" & CurrTxt
			            & " "
			            & CONCATENATEX (
			                VALUES ( 'Calendar'[Year Month] ),      
			                'Calendar'[Year Month],
			                ", ",
			                'Calendar'[Year Month]                   
			            )
			    )
			)
			
			
			
			```
		displayFolder: Project Transactions Revenue
		lineageTag: bc28df31-a7bb-4859-8c12-7e1bf51539a9

	measure 'Sales Until' =
			
			
			VAR StartDate = STARTOFYEAR('Calendar'[Date])
			VAR EndDate = MAX('Calendar'[Date])
			VAR Period = DATESBETWEEN(
			    'Calendar'[Date],
			    StartDate,
			    EndDate
			)
			RETURN
			CALCULATE([4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS('P&L'[Actuality] = "AC"), Period,
			USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date]))
		displayFolder: Financials
		lineageTag: eddfa65f-fe12-43c5-a358-0ce2d216b300

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Budgets Until' = ```
			
			VAR StartDate = MAX('Calendar'[Date]) + 1
			VAR EndDate = ENDOFYEAR('Calendar'[Date])
			VAR Period = 
			DATESBETWEEN(
			    'Calendar'[Date],
			    StartDate,
			    EndDate
			)
			RETURN
			    CALCULATE([4. P&L_Cal_ContextTransitionToMonth], LEFT('P&L'[Actuality],2) = "FC",
			    Period,
			    USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date])
			    )
			
			```
		displayFolder: Financials
		lineageTag: 5a33dc11-50bc-4181-b348-0c3f2079bae9

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Actual & Budget' = ```
			
			 [Sales Until] + [Budgets Until]
			
			
			// VAR SelectedVers =
			//     VALUES ( 'ActualityOrgin'[ActualityOrigin] )          -- what the slicer selected
			// VAR SelectedPlusAC =
			//     UNION ( SelectedVers, ROW ( "ActualityOrigin", "AC" ) ) -- force AC in
			// RETURN
			// CALCULATE (
			//     [Sales Until] + [Budgets Until],                                              -- your base measure
			//     REMOVEFILTERS ( 'ActualityOrgin'[ActualityOrigin] ),  -- clear slicer filter
			//     TREATAS ( SelectedPlusAC, 'ActualityOrgin'[ActualityOrigin] )
			// )
			
			```
		displayFolder: Financials
		lineageTag: 9ecb91af-9442-4368-9d36-d395ba94e3f7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure CF =
			
			VAR Actual = MAX('Pseudo Calendar'[Date]) <= MAX('Calendar'[Date])
			VAR Bud = MAX('Pseudo Calendar'[Date]) > MAX('Calendar'[Date])
			RETURN
			SWITCH(
			    TRUE(),
			    Actual, "#eff3f8",
			    Bud, "#fedbe2"
			)
		displayFolder: Financials
		lineageTag: 138df3af-260e-4f16-a235-4bc5cef7e619

	measure 'Budgets Until2' = ```
			
			VAR StartDate = MIN('Calendar'[Date]) 
			VAR EndDate = ENDOFYEAR('Calendar'[Date])
			VAR Period = 
			DATESBETWEEN(
			    'Calendar'[Date],
			    StartDate,
			    EndDate
			)
			VAR FC1 = 
			    CALCULATE([4. P&L_Cal_ContextTransitionToMonth], 'P&L'[Actuality] = "FC1",
			    Period,
			    USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date])
			    )
			
			
			
			VAR StartDate4 = MIN('Calendar'[Date]) 
			VAR EndDate4 = ENDOFYEAR('Calendar'[Date])
			VAR Period4 = 
			DATESBETWEEN(
			    'Calendar'[Date],
			    StartDate4,
			    EndDate4
			)
			VAR BU = 
			    CALCULATE([4. P&L_Cal_ContextTransitionToMonth], 'P&L'[Actuality] = "BU",
			    Period4,
			    USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date])
			    )
			
			
			VAR StartDate2 = MIN('Project Transactions'[Actualitydate]) 
			VAR EndDate2 = ENDOFYEAR('Calendar'[Date])
			VAR Period2 = 
			DATESBETWEEN(
			    'Calendar'[Date],
			    StartDate2,
			    EndDate2
			)
			VAR FC2 = 
			    CALCULATE([4. P&L_Cal_ContextTransitionToMonth], LEFT('P&L'[Actuality],2) = "FC",
			    Period2,
			    USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date])
			    )
			
			// VAR StartDate3 = MIN('Calendar'[Date]) 
			// VAR EndDate3 = ENDOFYEAR('Calendar'[Date])
			// VAR Period3 = 
			// DATESBETWEEN(
			//     'Calendar'[Date],
			//     StartDate3,
			//     EndDate3
			// )
			// VAR Actuals = 
			//     CALCULATE([4. P&L_Cal_ContextTransitionToMonth], 'P&L'[Actuality] = "AC",
			//     Period3,
			//     USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date])
			//     )
			
			
			
			
			 RETURN IF(SELECTEDVALUE('P&L'[Actuality]) ="FC1",FC1,IF(SELECTEDVALUE('P&L'[Actuality]) = "BU", BU, FC2))
			
			```
		displayFolder: Financials
		lineageTag: fc66dee2-816b-45ce-9032-3c1dd37b4eec

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Sales Until2' = ```
			
			
			VAR StartDate = BLANK()
			VAR EndDate = BLANK()
			VAR Period = DATESBETWEEN(
			    'Calendar'[Date],
			    StartDate,
			    EndDate
			)
			VAR  FC1 = 
			CALCULATE([4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS('P&L'[Actuality] = "AC"), Period,
			USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date])) 
			
			VAR StartDate2 = MIN('Calendar'[Date])
			VAR EndDate2 = MAX('P&L'[ActualityDate]) -1 
			VAR Period2 = DATESBETWEEN(
			    'Calendar'[Date],
			    StartDate2,
			    EndDate2
			)
			VAR  FC2To12 = 
			CALCULATE([4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS('P&L'[Actuality] = "AC"), Period2,
			USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date])) 
			
			VAR StartDate3 = MIN('Calendar'[Date])
			VAR EndDate3 = ENDOFYEAR('Calendar'[Date])
			VAR Period3 = DATESBETWEEN(
			    'Calendar'[Date],
			    StartDate3,
			    EndDate3
			)
			VAR  Actuals = 
			CALCULATE([4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS('P&L'[Actuality] = "AC"), Period3,
			USERELATIONSHIP('Pseudo Calendar'[Date], 'Calendar'[Date])) 
			
			
			
			
			
			
			RETURN IF(SELECTEDVALUE(Actuality[ActualityId]) IN {"BU", "FC1"} , FC1, IF(SELECTEDVALUE('P&L'[Actuality]) = "AC", Actuals, FC2To12))
			```
		displayFolder: Financials
		lineageTag: 8fbef769-dddc-43f9-bfaa-1d4d4d0f11f6

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Actual & Budget2' = ```
			
			//  [Sales Until2] + [Budgets Until2]
			
			
			VAR SelectedVers =
			    VALUES ( 'ActualityOrgin'[ActualityOrigin] )          -- what the slicer selected
			VAR SelectedPlusAC =
			    UNION ( SelectedVers, ROW ( "ActualityOrigin", "AC" ) ) -- force AC in
			RETURN
			CALCULATE (
			    [Sales Until2] + [Budgets Until2],                                              -- your base measure
			    REMOVEFILTERS ( 'ActualityOrgin'[ActualityOrigin] ),  -- clear slicer filter
			    TREATAS ( SelectedPlusAC, 'ActualityOrgin'[ActualityOrigin] )
			)
			
			```
		displayFolder: Financials
		lineageTag: 48007a0d-654b-485e-a805-ce3bbbee7ccd

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'P&L Revenue' = ```
			
			 
			 VAR TotalRevenue = 
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "30 Total Revenues"
			        )
			
			        RETURN
			
			        TotalRevenue
			```
		displayFolder: Financials
		lineageTag: 156b00f8-2e10-48c0-a4d2-cd2b3b8b00c7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	partition 'Measures Table' = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i45WMlSKjQUA", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", Int64.Type}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
				in
				    #"Removed Columns"

	annotation PBI_ResultType = Table

