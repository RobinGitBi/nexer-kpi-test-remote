table 'Measures Table'
	lineageTag: 988be8a7-76ea-492d-9ce2-ac05d4ea600e

	measure '4. P&L_Cal_ContextTransitionToMonth' = ```
			
			    SUMX(
			        VALUES('Calendar'[Year Month]), [3. P&L_Cal_YtdToMonth]
			    )/1000
			```
		formatString: #,0
		displayFolder: P&L Currency Conversions
		lineageTag: 8d0ba334-38ea-48ca-bc2d-0893bafcb020

	measure '3. P&L_Cal_YtdToMonth' =
			
			IF(
			        AND(SELECTEDVALUE('Calendar'[Month Number]) >1, [2. P&L_Cal_CurrencyConversion Sales (YTD)] <> 0),
			        [2. P&L_Cal_CurrencyConversion Sales (YTD)]- CALCULATE(
			            [2. P&L_Cal_CurrencyConversion Sales (YTD)],
			            PREVIOUSMONTH('Calendar'[Date])
			            ),
			        [2. P&L_Cal_CurrencyConversion Sales (YTD)]
			    )
		displayFolder: P&L Currency Conversions
		lineageTag: d11e3bb0-f4d3-4998-beea-e0b15d765267

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '2. P&L_Cal_CurrencyConversion Sales (YTD)' =
			
			IF (
			    HASONEVALUE ( 'Reporting Currency'[SourceCurrency] ),
			    VAR ForecastVersion = SELECTEDVALUE('P&L'[Actuality])
			    VAR AggregatedSalesInCurrency =
			        ADDCOLUMNS (
			            SUMMARIZE (
			                'P&L',
			                'Calendar'[Year Month],    -- Monthly granularity
			                'Source Currency'[CurrencyId]
			            ),
			            "@SalesAmount", CALCULATE([1. P&L_Cal_AmountYtd], 'P&L'[Actuality] = ForecastVersion),
			            "@Rate", CALCULATE ( SELECTEDVALUE ( 'Monthly Exchange Rates'[Rate]),
			            'Monthly Exchange Rates'[Actuality] = ForecastVersion,
			            'Monthly Exchange Rates'[CurrencyType] = "M")
			        )
			    VAR Result =
			        SUMX (
			            AggregatedSalesInCurrency,
			            IF (
			                NOT ( ISBLANK ( [@Rate] ) ),
			                [@SalesAmount] / [@Rate],
			                "Missing Value"
			            )
			            )
			    RETURN
			        Result)
		displayFolder: P&L Currency Conversions
		lineageTag: 22c4c3a5-a52c-4f88-953b-088a54714dbd

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '1. P&L_Cal_AmountYtd' = ```
			
			    CALCULATE(
			        SUMX(
			            'P&L', 
			            'P&L'[ReportingAmount]
			        ), 
			        DATESYTD('Calendar'[Date])
			    )
			```
		displayFolder: P&L Currency Conversions
		lineageTag: dfd305aa-9416-47af-8544-7da2315d5a70

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Unbilable Hours' = ```
			
			VAR SelectedActuality = SELECTEDVALUE('ActualityOrgin'[ActualityOrigin])
			
			RETURN
			
			// IF(
			    // SelectedActuality = "AC",
			    [Presence Hours] - [Billable Hours]
			    // ,
			    // CALCULATE(
			    //     SUMX(
			    //         'Project Transactions',
			    //         'Project Transactions'[TotalHours] * 'Project Transactions'[UhrFc]
			    //     ),
			    //    KEEPFILTERS(NOT 'Employment Type'[EmploymentTypeId] IN {4,5}) 
			    // )
			// )
			```
		displayFolder: HR
		lineageTag: 91971fbf-6770-47c6-bfa3-2f007ae3db89

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure UHR = ```
			
			
			    DIVIDE([Unbilable Hours] , [Presence Hours])
			```
		formatString: 0.0\ %;-0.0\ %;0.0\ %
		displayFolder: HR
		lineageTag: cb99a819-7ea9-411a-8f99-44fb440c4aa0

	measure 'Total Hours' = ```
			
			    
			    //VAR SelectedActuality = SELECTEDVALUE ( ActualityOrgin[ActualityOrigin] )
			    
			    //RETURN
			
			VAR AcTotalHours =
			        CALCULATE (
			            SUM ( 'Project Transactions'[TotalHours] ),
			            NOT 'Project Transactions'[EmploymentTypeID] in {4,5}
			        )
			
			
			VAR FcTotalHours = 
			        CALCULATE (
			            SUM ( 'Project Transactions'[TotalHours] ), USERELATIONSHIP('Project Transactions'[AdjustedFunction2], 'Function'[FunctionId]),
			            NOT 'Project Transactions'[EmploymentTypeID] in {4,5}
			        )
			
			VAR Result = IF(SELECTEDVALUE('Project Transactions'[Actuality] ) = "AC", AcTotalHours, FcTotalHours)
			
			RETURN Result
			
			```
		formatString: #,0
		displayFolder: HR
		lineageTag: 71973251-aed1-458e-8a4c-ed99d36a08dd

		annotation PBI_FormatHint = {"isDecimal":true}

	measure Old_Revenues = ```
			
			
			// VAR SelectedActualityOrigin = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			// VAR SelectedActuality = SELECTEDVALUE ( 'Actuality'[Actuality] )
			
			// RETURN
			
			// IF(SelectedActuality= "AC", 
			//     CALCULATE(
			//         [4. PT_Cal_ContextTransitionToMonth],
			//         FILTER('Project Transactions', [Total Hours] <> 0)),
			//             CALCULATE(
			//         [4. PT_Cal_ContextTransitionToMonth],
			//         FILTER('Project Transactions', [TotalRevenue] <> 0))
			//         // KEEPFILTERS('Project Transactions'[ActualityOrigin_new] = SelectedActualityOrigin )
			//         // FILTER('Project Transactions', 'Project Transactions'[TotalHours] <> 0)
			//         // ,'GL Account Hierarchy'[FirstLevelIdAndName] = "30 Total Revenues"
			//     )
			
			
			
			// VAR SelectedActualityOrigin = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			// VAR SelectedActuality = SELECTEDVALUE ( 'Actuality'[Actuality] )
			
			// RETURN
			
			//     CALCULATE(
			//         [4. PT_Cal_ContextTransitionToMonth],
			//         KEEPFILTERS('Project Transactions'[ActualityOrigin_new] = SelectedActualityOrigin )
			//         ,FILTER('Project Transactions', [Total Hours] <> 0)
			//     )
			
			```
		displayFolder: KPIs
		lineageTag: c0512b59-d556-4d12-996d-2a1b61f1f049

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Old_Price per hour' = ```
			
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'Project Transactions'[Actuality] )
			
			// VAR RevenuesAC = 
			//     CALCULATE(
			//         [Revenues],
			//         filter('Project Transactions', [Total Hours] <> 0)
			//         // 'Project Transactions'[TransactionType]=1
			//     )
			
			// VAR RevenuesFC = 
			//     CALCULATE(
			//         [Revenues],
			//         filter('Project Transactions', [Revenues] <> 0),
			//         KEEPFILTERS(
			//         NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			//         )
			//     )
			
			// RETURN
			
			// IF(
			//     SelectedActuality = "AC",
			//     DIVIDE(RevenuesAC,[Billable Hours]),
			//     DIVIDE(RevenuesFC,[Billable Hours])
			// )
			
			```
		displayFolder: HR
		lineageTag: d9c079b4-a264-4af1-ada0-19005ec09874

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Old_Presence Hours FC' = ```
			
			
			    // VAR SelectedActuality = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			    
			    // RETURN
			    //     CALCULATE (
			    //         SUM ( 'Project Transactions'[TotalHours] ),
			    //         KEEPFILTERS('Project Transactions'[ProjectClassType] in {1,2}),
			    //         NOT 'Project Transactions'[EmploymentTypeID] in {4,5},
			    //         'Project Transactions'[ActualityOrigin_new] = SelectedActuality,
			    //     )
			
			    // VAR SelectedActuality = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			    // VAR SelectedFunction = SELECTEDVALUE( 'Function'[FunctionId])
			    // RETURN
			    // IF(SelectedFunction <> "10",
			    //          CALCULATE (
			    //         SUM ( 'Project Transactions'[TotalHours] ),
			    //         KEEPFILTERS('Project Transactions'[ProjectClassType] in {1}),
			    //         NOT 'Project Transactions'[EmploymentTypeID] in {4,5},
			    //         'Project Transactions'[ActualityOrigin_new] = SelectedActuality
			    //     ))
			        
			        
			        // ,
			
			
			
			        // CALCULATE (
			        //     SUM ( 'Project Transactions'[TotalHours] ),
			        //     KEEPFILTERS('Project Transactions'[ProjectClassType] in {1,2}),
			        //     NOT 'Project Transactions'[EmploymentTypeID] in {4,5},
			        //     'Project Transactions'[ActualityOrigin_new] = SelectedActuality
			        // ))
			
			
			
			
			
			
			
			// VAR SelectedActuality =
			//     SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			// VAR FuncId =
			//     SELECTEDVALUE ( 'Function'[FunctionId] )
			// RETURN
			// SWITCH (
			//     TRUE (),
			
			//     -- Admin
			//     FuncId = 20,
			//         CALCULATE (
			//             SUM ( 'Project Transactions'[TotalHours] ),
			//             KEEPFILTERS ( 'Project Transactions'[ProjectClassType] = 1 ),
			//             KEEPFILTERS ( NOT ( 'Project Transactions'[EmploymentTypeID] IN { 4, 5 } ) ),
			//             KEEPFILTERS ( 'Project Transactions'[ActualityOrigin_new] = SelectedActuality )
			//         ),
			
			//     -- Production
			//     FuncId = 10,
			//         CALCULATE (
			//             SUM ( 'Project Transactions'[TotalHours] ),
			//             KEEPFILTERS ( 'Project Transactions'[ProjectClassType] IN { 1, 2 } ),
			//             KEEPFILTERS ( NOT ( 'Project Transactions'[EmploymentTypeID] IN { 4, 5 } ) ),
			//             KEEPFILTERS ( 'Project Transactions'[ActualityOrigin_new] = SelectedActuality )
			//         ),
			
			//     -- Fallback (t.ex. totals)
			//     CALCULATE (
			//         SUM ( 'Project Transactions'[TotalHours] ),
			//         KEEPFILTERS ( 'Project Transactions'[ProjectClassType] IN { 1, 2 } ),
			//         KEEPFILTERS ( NOT ( 'Project Transactions'[EmploymentTypeID] IN { 4, 5 } ) ),
			//         KEEPFILTERS ( 'Project Transactions'[ActualityOrigin_new] = SelectedActuality )
			//     )
			// )
			
			// ))
			
			
			CALCULATE(SUM('Project Transactions'[TotalHours]), KEEPFILTERS('Function'[FunctionId] = "10"), KEEPFILTERS('Project Transactions'[ProjectClassType] in({1,2}))) 
			 + CALCULATE(SUM('Project Transactions'[TotalHours]),KEEPFILTERS('Project Transactions'[FunctionAdjusted] = "20" ), KEEPFILTERS('Project Transactions'[ProjectClassType] = 1))
			
			
			    // CALCULATE (
			    //         SUM ( 'Project Transactions'[TotalHours] ),
			    //         KEEPFILTERS('Project Transactions'[ProjectClassType] in {1,2}),
			    //         NOT 'Project Transactions'[EmploymentTypeID] in {4,5})))
			```
		displayFolder: HR
		lineageTag: 4c937dde-ab27-4141-87d3-59dbd4301b89

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Old_OH% =
			
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			
			// RETURN
			
			//     DIVIDE(
			//         CALCULATE(
			//             [FTE],
			//             'Function'[FunctionId] = "20"
			//             ,KEEPFILTERS('Project Transactions'[ActualityOrigin_new] = SelectedActuality)),
			//     [FTE]
			//     )
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: HR
		lineageTag: 8db79e53-cdb0-4971-b52c-705540cf41df

	measure 'Old_1. // FTE' = ```
			
			SUMX (
			    VALUES ( 'Project Transactions'[ProjectEmployeeId] ),
			    VAR FTECalculation =
			        CALCULATE (
			            DIVIDE (
			                CALCULATE (
			                    SUM ( 'Project Transactions'[TotalHours] ),
			                    FILTER (
			                        ALL ( 'Time Code'[TimeCode] ),
			                        ISBLANK ( 'Time Code'[TimeCode] )
			                            || 'Time Code'[TimeCode]
			                            IN {
			                                "400",
			                                "401",
			                                "402",
			                                "403",
			                                "8020",
			                                "8040",
			                                "8060",
			                                "8080",
			                                "9900",
			                                "9911",
			                                "9915",
			                                "9916",
			                                "9920",
			                                "9922",
			                                "9924",
			                                "9930",
			                                "9935",
			                                "9940",
			                                "9950",
			                                "9960",
			                                "9980",
			                                "9982"
			                            }
			                    )
			                ),
			                CALCULATE(SUM('Project Transactions'[NormalWorkingHoursMonthly]), CROSSFILTER('Project Transactions'[AdjustedFunction], 'Function'[FunctionId], none)))
			            //     SUM ( 'Project Transactions'[NormalWorkingHoursMonthly] )
			            // ),
			            // KEEPFILTERS ( NOT 'Employment Type'[EmploymentTypeId] IN { 4, 5 } ),
			            // KEEPFILTERS ( 'Project Transactions'[Actuality] = "AC" ),
			            // KEEPFILTERS ( 'Project Transactions'[OverTime] = 0 ),
			            // 'Calendar'[Year Month] = MAX ( 'Calendar'[Year Month] ), USERELATIONSHIP('Project Transactions'[EmployeeFunctionId],'Function'[FunctionId])
			        // )
			VAR FcFte =
			            CALCULATE(
			    SUM('Project Transactions'[FteFc]),
			     KEEPFILTERS(
			            NOT 'Employment Type'[EmploymentTypeId] IN {4,5}
			        ))
			
			VAR Result = FTECalculation+FcFte
			
			    RETURN
			        IF ( Result <> 0, Result )
			)
			
			```
		displayFolder: HR
		lineageTag: ac4c81db-67e2-4b8a-92c8-f6262e019652

		changedProperty = IsHidden

	measure 'Billable Hours' = ```
			
			
			
			 VAR AcBillableHours = 
			 
			    CALCULATE(
			        SUM('Project Transactions'[TotalHours]),
			        'Project Transactions'[ProjectClassType] = 1,
			        'Project Transactions'[NonChargableId] = 0,
			        KEEPFILTERS(NOT 'Project Transactions'[EmploymentTypeId] IN {4,5})
			    )
			   
			
			   VAR FcBillableHours = 
			CALCULATE(
			SUM('Project Transactions'[TotalHours]),
			USERELATIONSHIP('Project Transactions'[AdjustedFunction2], 'Function'[FunctionId]),
			// FILTER('Project Transactions', [TotalRevenue] <> 0),
			KEEPFILTERS('Project Transactions'[NonChargableId] = 0),
			            KEEPFILTERS(
			                NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			            )
			        )
			
			VAR Result = IF(SELECTEDVALUE('Project Transactions'[Actuality] ) = "AC", AcBillableHours, FcBillableHours)
			
			RETURN IF(Result <> 0 , Result)
			
			 
			// VAR SelectedActuality = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			 
			// RETURN
			 
			// IF(
			//      SelectedActuality = "AC",
			//     CALCULATE(
			//         SUM('Project Transactions'[TotalHours]),
			//         'Project Transactions'[ProjectClassType] = 1,
			//         'Project Transactions'[NonChargableId] = 0,
			//         KEEPFILTERS(NOT 'Project Transactions'[EmploymentTypeId] IN {4,5})
			//     ),
			   
			//         CALCULATE(
			//             SUMX(
			//                 'Project Transactions',
			//                 'Project Transactions'[TotalHours] * (1 - 'Project Transactions'[UhrFc])
			//             ),
			//             KEEPFILTERS(
			//                 NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			//             ),
			//              KEEPFILTERS(LEN('Project Transactions'[TimeCode]) < 4)
			//         )
			// )
			
			
			
			
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'ActualityOrgin'[ActualityOrigin] )
			 
			// RETURN
			 
			// IF(
			//      SelectedActuality = "AC",
			//     CALCULATE(
			//         SUM('Project Transactions'[TotalHours]),
			//         'Project Transactions'[ProjectClassType] = 1,
			//         'Project Transactions'[NonChargableId] = 0,
			//         KEEPFILTERS(NOT 'Project Transactions'[EmploymentTypeId] IN {4,5})
			//     ),
			   
			// CALCULATE(
			// SUM('Project Transactions'[TotalHours]),
			// FILTER('Project Transactions', [TotalRevenue] <> 0),
			//             KEEPFILTERS(
			//                 NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			//             )
			//         )
			// )
			```
		formatString: #,0
		displayFolder: HR
		lineageTag: e55bea96-4911-422c-8361-499c4485a3c3

		annotation PBI_FormatHint = {"isDecimal":true}

	measure Absence = ```
			
			    DIVIDE(([Total Hours] - [Presence Hours]) ,[Total Hours])
			```
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: HR
		lineageTag: 0849e2d6-09e0-42a8-84c5-2fb8cd882cb6

	measure EBIT = ```
			
			    VAR TotalRevenue = 
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "30 Total Revenues"
			        )
			    VAR TotalCOGS = 
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "40 Total Direct Costs"
			        )
			    VAR TotalOverhead = 
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "50 Total Overhead Costs"
			        )
			RETURN
			TotalRevenue + TotalCOGS + TotalOverhead
			```
		formatString: #,0
		displayFolder: Financials
		lineageTag: 27b829f2-0f4d-498b-8c93-1af55f6bafa4

	measure 'EBIT %' = ```
			
			    DIVIDE(
			        [EBIT],  
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'GL Account Hierarchy'[FirstLevelIdAndName] = "30 Total Revenues"
			        ))
			```
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: Financials
		lineageTag: 6384041d-981c-4eea-9298-b431f5c8359f

	measure '1. PT_Cal_AmountYtd' = ```
			
			    CALCULATE(
			        SUMX(
			            'Project Transactions', 
			            'Project Transactions'[TotalRevenue]
			        ), 
			        DATESYTD('Calendar'[Date])
			    )
			```
		displayFolder: Project Transactions Revenue
		lineageTag: c6900ad0-7477-4c8e-89d0-8b9d963209be

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '2. AC PT_Cal_CurrencyConversion Sales (YTD)' = ```
			
			IF (
			    HASONEVALUE ( 'Reporting Currency'[SourceCurrency] ),
			    VAR SelectedActuality = SELECTEDVALUE ( 'Monthly Exchange Rates'[Actuality] )
			    VAR SelectedCurrencyType = SELECTEDVALUE ( 'Monthly Exchange Rates'[CurrencyType] )
			    VAR AggregatedSalesInCurrency =
			        ADDCOLUMNS (
			            SUMMARIZE (
			                'Project Transactions',
			                'Calendar'[Year Month],    -- Monthly granularity
			                'Source Currency'[CurrencyId]
			            ),
			            "@SalesAmount", CALCULATE([1. PT_Cal_AmountYtd], 'Project Transactions'[Actuality] ="AC"),
			            "@Rate", CALCULATE ( SELECTEDVALUE ( 'Monthly Exchange Rates'[Rate]), 
			            'Monthly Exchange Rates'[Actuality] = "AC",
			            exchangeratesmonthly[CurrencyType] = "M")
			            //,'Currency Type'[Calculation group column])
			        )
			    VAR Result =
			        SUMX (
			            AggregatedSalesInCurrency,
			            IF (
			                NOT ( ISBLANK ( [@Rate] ) ),
			                [@SalesAmount] / [@Rate],
			                "Missing Value"
			            )
			            )
			    RETURN
			        Result)
			```
		displayFolder: Project Transactions Revenue
		lineageTag: b5e4a934-3f2f-4a3f-9f2d-e9b059ab8975

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '3. AC PT_Cal_YtdToMonth' = ```
			
			    IF(
			          AND(SELECTEDVALUE('Calendar'[Month Number]) >1, [2. AC PT_Cal_CurrencyConversion Sales (YTD)] <> 0),
			        [2. AC PT_Cal_CurrencyConversion Sales (YTD)]- CALCULATE(
			            [2. AC PT_Cal_CurrencyConversion Sales (YTD)], 
			            PREVIOUSMONTH('Calendar'[Date])
			            ), 
			        [2. AC PT_Cal_CurrencyConversion Sales (YTD)]
			    )
			```
		displayFolder: Project Transactions Revenue
		lineageTag: a667b544-6a7f-41c0-8b7a-92cf2b123752

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Old_Presence =
			
			// CALCULATE(SUM('Project Transactions'[TotalHours]), USERELATIONSHIP('Project Transactions'[ActualityDate], 'Calendar'[Date]))
		formatString: 0
		displayFolder: HR
		lineageTag: 929c5730-245b-400c-98ec-6e3a37e10404

	measure Old_X_Hours = ```
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'Project Transactions'[Actuality] )
			
			// RETURN
			
			// IF(
			//     SelectedActuality = "AC",
			//     CALCULATE(
			//         [Total Hours], 
			//         'Project Transactions'[ProjectClassType] IN {1, 2},
			//         KEEPFILTERS(
			//             NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			//         ),
			//         KEEPFILTERS( 
			//             'Project Transactions'[Actuality] = SelectedActuality
			//         )
			//     ),
			//         CALCULATE(
			//         SUMX(
			//             'Project Transactions',
			//             'Project Transactions'[TotalHours] * (1 - 'Project Transactions'[UhrFc])
			//         ),
			//         KEEPFILTERS(
			//             NOT 'Employment Type'[EmploymentTypeId] IN {4, 5}
			//         )
			//     ))
			```
		displayFolder: KPIs
		lineageTag: b428a2ad-712c-4015-9769-904d85aa992d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure ContextTransition = SUMX(VALUES('Calendar'[Year Month]), [Old_Presence Hours FC])
		displayFolder: KPIs
		lineageTag: a093e87f-285f-4432-9632-4688dc2652d7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Old_FTE = ```
			
			//     VAR SelectedActuality = SELECTEDVALUE ( 'Project Transactions'[ActualityOrigin] )
			    
			//     RETURN
			
			// IF(
			//     ISBLANK(SelectedActuality),
			//     [1. FTE],
			//     CALCULATE(
			//     SUM('Project Transactions'[FteFc]),
			//      KEEPFILTERS(
			//             NOT 'Employment Type'[EmploymentTypeId] IN {4,5}
			//         ),
			//     'Calendar'[Year Month] = MAX('Calendar'[Year Month])
			// )
			
			// )
			```
		formatString: 0.0
		displayFolder: HR
		lineageTag: f08b70a5-c100-4d04-b88e-8754a575ef58

	measure 'Old_Total Direct Cost' =
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'Project Transactions'[Actuality] )
			
			// RETURN
			
			//     CALCULATE(
			//         [4. PT_Cal_Costs_ContextTransitionToMonth]
			//         ,KEEPFILTERS('Project Transactions'[Actuality] = SelectedActuality )
			//         ,'Project Transactions'[Function]="Prod"
			//         ,'GL Account Hierarchy'[FirstLevelIdAndName] = "40 Total Direct Costs"
			//     )
		displayFolder: Financials
		lineageTag: c45b0bbc-0874-48af-856c-11b14be2d8a0

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '1. PT_Cal_CostsYtd' = ```
			
			    CALCULATE(
			        SUMX(
			            'Project Transactions', 
			            'Project Transactions'[TotalCost]
			        ), 
			        DATESYTD('Calendar'[Date])
			    )
			```
		displayFolder: Project Transactions Costs
		lineageTag: 7854a8b5-620b-418e-92d9-d883d4afb14d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '2. AC PT_Cal_CurrencyConversion Costs (YTD)' = ```
			
			IF (
			    HASONEVALUE ( 'Reporting Currency'[SourceCurrency] ),
			    VAR ForecastVersion = SELECTEDVALUE ( 'Monthly Exchange Rates'[Actuality] )
			    VAR AggregatedSalesInCurrency =
			        ADDCOLUMNS (
			            SUMMARIZE (
			                'Project Transactions',
			                'Calendar'[Year Month],    -- Monthly granularity
			                'Source Currency'[CurrencyId]
			            ),
			            "@SalesAmount", CALCULATE([1. PT_Cal_CostsYtd], 'Project Transactions'[Actuality] = ForecastVersion),
			            "@Rate", CALCULATE ( SELECTEDVALUE ( 'Monthly Exchange Rates'[Rate]), 
			            'Monthly Exchange Rates'[Actuality] = ForecastVersion,
			            exchangeratesmonthly[CurrencyType] = "M")
			        )
			    VAR Result =
			        SUMX (
			            AggregatedSalesInCurrency,
			            IF (
			                NOT ( ISBLANK ( [@Rate] ) ),
			                [@SalesAmount] / [@Rate],
			                "Missing Value"
			            )
			            )
			    RETURN
			        Result)
			```
		displayFolder: Project Transactions Costs
		lineageTag: 7b9b6f0f-eff1-415a-8cf3-ef9c4a5fcbeb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '3. AC PT_Cal_Costs_YtdToMonth' = ```
			
			    IF(
			          AND(SELECTEDVALUE('Calendar'[Month Number]) >1, [2. AC PT_Cal_CurrencyConversion Costs (YTD)] <> 0),
			        [2. AC PT_Cal_CurrencyConversion Costs (YTD)]- CALCULATE(
			            [2. AC PT_Cal_CurrencyConversion Costs (YTD)], 
			            PREVIOUSMONTH('Calendar'[Date])
			            ), 
			        [2. AC PT_Cal_CurrencyConversion Costs (YTD)]
			    )
			```
		displayFolder: Project Transactions Costs
		lineageTag: 51bcb4e7-3ff8-4f2a-b53d-57396408e5fc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '4. AC PT_Cal_Costs_ContextTransitionToMonth' = ```
			
			    SUMX(
			        VALUES('Calendar'[Year Month]), [3. AC PT_Cal_Costs_YtdToMonth]
			    )
			```
		displayFolder: Project Transactions Costs
		lineageTag: 50973e24-bbf9-493f-92c9-78bc64b80b26

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Gross Margin' =
			
			
			CALCULATE (
			    ([Old_Revenues] + [Old_GM1 Total Direct Costs]) / [Old_Revenues]
			
			)
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: Financials
		lineageTag: 795a7a58-d706-425e-9be4-87c19bfe317d

	measure 'Old_Gross Margin Hours' = ```
			
			    // DIVIDE(
			    //     ([Old_Revenues] + [GM1 Total Direct Costs]),
			    //     [Total Hours]
			    // )
			    // *
			    // [Total Hours]
			```
		formatString: #,0
		displayFolder: Financials
		lineageTag: a981d33d-241a-4605-8cb9-271b53a960e8

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Old_GM1 Total Direct Costs' = ```
			
			// VAR Result = 
			//     CALCULATE(
			//         [4. PT_Cal_Costs_ContextTransitionToMonth],
			//         'Function'[FunctionName] = "Production",
			//         'GL Account Hierarchy'[FirstLevelIdAndName] = "40 Total Direct Costs"
			//         //,'Project Transactions'[ExpenseCode] = "98" 
			//         //,KEEPFILTERS('Project Transactions'[TransactionType] = 1)
			//     )
			// RETURN
			//     IF(Result = 0, BLANK(), Result)
			
			```
		displayFolder: Financials
		lineageTag: a139e776-09b0-4e9e-b613-547f044871a4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Old_Gross Margin Hours  %' = ```
			
			    // DIVIDE(
			    //     [Gross Margin Hours],
			    //     [Old_Revenues]
			    // )
			```
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: Financials
		lineageTag: 33bd47cc-8995-4851-8924-3be66c750274

	measure PL_Actual_vs_Origin = ```
			
			VAR SelectedMonth = SELECTEDVALUE('Calendar'[Year Month])
			VAR SelectedMonthAsDate = DATE(LEFT(SelectedMonth, 4), RIGHT(SelectedMonth, 2), 1)
			VAR PriorYearMonth = FORMAT(EDATE(SelectedMonthAsDate, -12), "YYYYMM")
			VAR CurrentMonth = FORMAT(TODAY(), "YYYYMM")
			VAR MostRecentDate = FORMAT(
			    CALCULATE(
			        MAX('Calendar'[Date]),
			        ALLSELECTED('Calendar')
			    ),
			    "YYYYMM"
			)
			VAR SelectedMonthFormatted = FORMAT(MAX('Calendar'[Date]), "YYYYMM")
			
			RETURN
			IF (
			    COUNTROWS(
			        FILTER(
			            'P&L',
			            RIGHT('P&L'[ActualityOrigin_new], 6) IN VALUES('Calendar'[Year Month])
			        )
			    ) > 0,
			    CALCULATE(
			        [4. P&L_Cal_ContextTransitionToMonth],
			        KEEPFILTERS('P&L'[ActualityOrigin_new] <> "AC")
			    ),
			    IF (
			        SelectedMonthFormatted > CurrentMonth && SelectedMonthFormatted <= MostRecentDate,
			        CALCULATE(
			            [4. P&L_Cal_ContextTransitionToMonth],
			            'P&L'[Actuality] <> "AC",
			            FORMAT('P&L'[ActualityDate], "YYYYMM") = PriorYearMonth
			        ),
			        IF (
			            SelectedMonthFormatted < CurrentMonth,
			            CALCULATE(
			                [4. P&L_Cal_ContextTransitionToMonth],
			                KEEPFILTERS('P&L'[ActualityOrigin_new] = "AC")
			            ),
			            BLANK()
			        )
			    )
			)
			
			```
		formatString: #,0
		displayFolder: Financials
		lineageTag: 9d1c8189-db60-4a0a-9a8e-0282cb380acb

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Old_Other Leave Ratio' =
			
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'Project Transactions'[ActualityOrigin] )
			
			// RETURN
			//     DIVIDE(
			//         CALCULATE (
			//             SUM ( 'Project Transactions'[TotalHours] ),
			//             NOT 'Employment Type'[EmploymentTypeId] in {4,5},
			//             'Time Code'[AbsenceType] = "Other",
			//             KEEPFILTERS('Project Transactions'[Actuality] = SelectedActuality)
			//         ),
			//         [Total Hours]
			//     )
		displayFolder: HR
		lineageTag: dcac4cfc-8b51-41f4-a9d2-440a7ab6e62d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Old_Sick Leave Ratio' =
			
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'Project Transactions'[ActualityOrigin] )
			
			// RETURN
			//     DIVIDE(
			//         CALCULATE (
			//             SUM ( 'Project Transactions'[TotalHours] ),
			//             NOT 'Employment Type'[EmploymentTypeId] in {4,5},
			//             'Time Code'[AbsenceType] = "Sick",
			//             KEEPFILTERS('Project Transactions'[Actuality] = SelectedActuality)
			//         ),
			//         [Total Hours]
			//     )
		displayFolder: HR
		lineageTag: 5cc2fb9f-1b4e-438d-9b97-7c77c6545ba8

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Old_Vacation Ratio' =
			
			
			// VAR SelectedActuality = SELECTEDVALUE ( 'Project Transactions'[ActualityOrigin] )
			
			// RETURN
			// DIVIDE(
			//     CALCULATE (
			//         SUM ( 'Project Transactions'[TotalHours] ),
			//         NOT 'Employment Type'[EmploymentTypeId] in {4,5},
			//         'Time Code'[AbsenceType] = "Vacation",
			//         KEEPFILTERS('Project Transactions'[Actuality] = SelectedActuality)
			//     ),
			//     [Total Hours]
			// )
		displayFolder: HR
		lineageTag: e1be8a38-5d90-4cba-8cbc-09b5ce6edf10

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure SelectedUnit = ```
			
			VAR SelectedValues = DISTINCT('Organisation Manual'[Organisation])
			VAR CountSelected = COUNTROWS(SelectedValues)
			RETURN
			    IF(
			        ISFILTERED('Organisation Manual'[Organisation]),
			        SWITCH(
			            TRUE(),
			            CountSelected = 1 || CountSelected = 2,
			                CONCATENATEX(
			                    SelectedValues,
			                    'Organisation Manual'[Organisation],
			                    ", ",
			                    'Organisation Manual'[Organisation],
			                    ASC
			                ),
			            CountSelected > 2,
			                CONCATENATEX(
			                    TOPN(2, SelectedValues, 'Organisation Manual'[Organisation], ASC),
			                    'Organisation Manual'[Organisation],
			                    ", ",
			                    'Organisation Manual'[Organisation],
			                    ASC
			                ) & " and more"
			        ),
			        "All BL/Chairman Selected"
			    )
			
			```
		lineageTag: 91737438-fcb7-4f8e-bb57-85fb42941d44

	measure 'Selected Year and Months' = ```
			
			VAR SelectedYear = SELECTEDVALUE('Calendar'[Year])
			VAR YearCount = COUNTROWS(VALUES('Calendar'[Year]))
			VAR SelectedMonths =
			    FILTER(
			        VALUES('Calendar'),
			        'Calendar'[Year] = SelectedYear
			    )
			VAR MonthTable =
			    ADDCOLUMNS(
			        SUMMARIZE(SelectedMonths, 'Calendar'[Month], 'Calendar'[Month Number]),
			        "MonthName", 'Calendar'[Month]
			    )
			VAR MonthList =
			    CONCATENATEX(
			        MonthTable,
			        [MonthName],
			        ", ",
			        [Month Number],
			        ASC
			    )
			RETURN
			    IF(
			        YearCount = 1,
			        SelectedYear & ": " & MonthList,
			        "Select a single year"
			    )
			
			```
		lineageTag: e5f3a4ac-ec84-4a6b-873b-1bb63aaf6528

	measure fcrEV = CALCULATE([4. AC PT_Cal_ContextTransitionToMonth], FILTER('Project Transactions', 'Project Transactions'[TotalRevenue] <> 0))
		displayFolder: KPIs
		lineageTag: 1fcef201-a5ac-473e-98ff-0c6477a09336

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Presence Hours' = ```
			
			
			VAR 
			AcPresenceHours =
			    CALCULATE (
			            SUM ( 'Project Transactions'[TotalHours] ),
			            KEEPFILTERS('Project Transactions'[ProjectClassType] in {1,2}),
			            NOT 'Project Transactions'[EmploymentTypeID] in {4,5})
			
			VAR FcPresenceHours = 
			CALCULATE(SUM('Project Transactions'[TotalHours]), KEEPFILTERS('Function'[FunctionId] in { "10", "20"}), KEEPFILTERS('Project Transactions'[ProjectClassType] in({1,2})), USERELATIONSHIP('Project Transactions'[AdjustedFunction2], 'Function'[FunctionId])) 
			// CALCULATE(SUM('Project Transactions'[TotalHours]), KEEPFILTERS('Function'[FunctionId] = "10"), KEEPFILTERS('Project Transactions'[ProjectClassType] in({1,2}))) 
			//  + CALCULATE(SUM('Project Transactions'[TotalHours]),KEEPFILTERS('Project Transactions'[AdjustedFunction] = "20" ), KEEPFILTERS('Project Transactions'[ProjectClassType] = 1))
			
			VAR Result1 = IF(SELECTEDVALUE('Project Transactions'[Actuality] ) = "AC", AcPresenceHours, FcPresenceHours)
			
			VAR Result2 = IF(Result1 <> 0,Result1)
			
			
			
			RETURN Result2
			```
		formatString: #,0
		displayFolder: HR
		lineageTag: e80bc049-9151-4928-a9ae-6c68bff822d1

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Old_Merged Presence' =
			
			// SWITCH(TRUE(),
			// SELECTEDVALUE('Project Transactions'[Actuality]) = "AC", [Correct Presence Hours AC],
			// SELECTEDVALUE('Project Transactions'[Actuality]) <> "AC", [Presence Hours FC]
			// )
		displayFolder: HR
		lineageTag: 59a07d76-0da8-4a64-a827-25087f863487

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Total Direct Costs' =
			IF(SELECTEDVALUE('Project Transactions'[Actuality]) = "AC", CALCULATE([4. ProjectCost_Cal_ContextTransitionToMonth] , USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId]), KEEPFILTERS('Project Transactions'[AdjustedFunction] = "10"), KEEPFILTERS('Project Transactions'[ProjectClassType] in { 1 }), KEEPFILTERS('Project Transactions'[EmploymentTypeId] <4)),
			 CALCULATE([4. ProjectCost_Cal_ContextTransitionToMonth], USERELATIONSHIP('Project Transactions'[AdjustedFunction2], 'Function'[FunctionId]), KEEPFILTERS('Project Transactions'[ProjectClassType] in { 1 }), KEEPFILTERS('Project Transactions'[EmploymentTypeId] in {1,2,3})))
		displayFolder: HR
		lineageTag: 011c4945-1415-4e52-ade5-eeedaccb201b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure FTE = ```
			
			SUMX (
			    VALUES ( 'Project Transactions'[ProjectEmployeeId] ),
			    VAR FTECalculation =
			        CALCULATE (
			            DIVIDE (
			                CALCULATE (
			                    SUM ( 'Project Transactions'[TotalHours] ),
			                    FILTER (
			                        ALL ( 'Project Transactions'[TimeCode] ),
			                        
			                        ISBLANK ( 'Project Transactions'[TimeCode] )
			                            // || 'Project Transactions'[TimeCode] <> "" 
			                            ||
			                             'Project Transactions'[TimeCode]
			                            IN {
			                                "400",
			                                "401",
			                                "402",
			                                "403",
			                                "8020",
			                                "8040",
			                                "8060",
			                                "8080",
			                                "9900",
			                                "9911",
			                                "9915",
			                                "9916",
			                                "9920",
			                                "9922",
			                                "9924",
			                                "9930",
			                                "9935",
			                                "9940",
			                                "9950",
			                                "9960",
			                                "9980",
			                                "9982",
			                                ""
			                            }
			                    ),            
			                    KEEPFILTERS ( NOT 'Employment Type'[EmploymentTypeId] IN { 4, 5 } ),
			            KEEPFILTERS ( 'Project Transactions'[Actuality] = "AC" ),
			            // KEEPFILTERS('Project Transactions'[TransactionType] = 1),
			            KEEPFILTERS ( 'Project Transactions'[OverTime] = 0 ),
			            'Calendar'[Year Month] = MAX ( 'Calendar'[Year Month] )
			                )
			                ,
			                CALCULATE(SUM ( 'Project Transactions'[NormalWorkingHoursMonthly] )
			                ,
			                CROSSFILTER('Project Transactions'[AdjustedFunction], 'Function'[FunctionId], none)
			                )
			            )
			
			        )
			        +
			                    CALCULATE(
			    SUM('Project Transactions'[FteFc]), KEEPFILTERS(not 'Project Transactions'[EmploymentTypeId] in {4,5}))
			    //  KEEPFILTERS(
			    //         NOT 'Employment Type'[EmploymentTypeId] IN {4,5}
			    //     ), trans)
			    RETURN
			        IF ( FTECalculation <> 0, FTECalculation )
			)
			
			```
		formatString: 0.0
		displayFolder: HR
		lineageTag: 8355551f-746a-4846-95e9-3edb8f73ea4f

	measure OFTE = ```
			
			    VAR SelectedActuality = SELECTEDVALUE ( 'Project Transactions'[ActualityOrigin] )
			    
			    RETURN
			
			IF(
			    ISBLANK(SelectedActuality),
			    [Old_1. // FTE],
			    CALCULATE(
			    SUM('Project Transactions'[FteFc]),
			     KEEPFILTERS(
			            NOT 'Employment Type'[EmploymentTypeId] IN {4,5}
			        ),
			    'Calendar'[Year Month] = MAX('Calendar'[Year Month])
			)
			
			)
			```
		displayFolder: KPIs
		lineageTag: deb3c749-4b99-4c94-9b30-0655b5a8725e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure OH% =
			
			
			VAR  FcFte = CALCULATE(SUM('Project Transactions'[FteFc]), KEEPFILTERS('Employment Type'[EmploymentTypeId] <4))
			
			
			VAR FcFteProduction = CALCULATE(SUM('Project Transactions'[FteFc]), KEEPFILTERS('Employment Type'[EmploymentTypeId] <4), KEEPFILTERS('Function'[FunctionId] = "20"), USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId])
			, 'Function'[FunctionId])
			
			
			VAR FcOhPerc = DIVIDE( FcFteProduction, FcFte)
			
			VAR Result = if(SELECTEDVALUE('Project Transactions'[Actuality]) = "AC", DIVIDE(CALCULATE([FTE], KEEPFILTERS('Function'[FunctionId] =  "20")), [FTE]), FcOhPerc )
			
			
			RETURN Result
		formatString: 0.0\ %;-0.0\ %;0.0\ %
		displayFolder: HR
		lineageTag: bb2813e4-7226-47f7-8765-77a986ac7449

	measure SemiCorrectFCFTE = CALCULATE(SUM('Project Transactions'[FteFc]), KEEPFILTERS('Employment Type'[EmploymentTypeId] <4))
		displayFolder: KPIs
		lineageTag: 4759f5cc-e9b9-48db-9609-0934a2beb1eb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure SemiCorrectFCOH% = ```
			
			
			
			VAR  FcFte = CALCULATE(SUM('Project Transactions'[FteFc]), KEEPFILTERS('Employment Type'[EmploymentTypeId] <4))
			
			
			
			
			
			
			VAR FcFteProduction = CALCULATE(SUM('Project Transactions'[FteFc]), KEEPFILTERS('Employment Type'[EmploymentTypeId] <4), KEEPFILTERS('Function'[FunctionId] = "20"), USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId])
			, 'Function'[FunctionId])
			
			
			VAR Result = DIVIDE( FcFteProduction, FcFte)
			
			RETURN Result
			
			
			```
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		displayFolder: KPIs
		lineageTag: 6a597d6e-9ae0-46cf-8420-20d914c8110e

	measure 'Correct Revenue' = ```
			
			
			VAR AcRevenue = 
			CALCULATE([4. ProjectRevenue_Cal_ContextTransitionToMonth], 
			 USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId]),
			  KEEPFILTERS('Project Transactions'[AdjustedFunction] = "10")
			, KEEPFILTERS('Project Transactions'[ProjectClassType] = 1), KEEPFILTERS('Project Transactions'[EmploymentTypeId] <4))
			
			
			VAR FcRevenue = 
			CALCULATE([4. ProjectRevenue_Cal_ContextTransitionToMonth], 
			 USERELATIONSHIP('Project Transactions'[AdjustedFunction], 'Function'[FunctionId]),
			  KEEPFILTERS('Project Transactions'[AdjustedFunction2] = "10")
			, KEEPFILTERS('Project Transactions'[ProjectClassType] = 1), KEEPFILTERS('Project Transactions'[EmploymentTypeId] in {1,2,3}))
			
			VAR Result = IF(SELECTEDVALUE('Project Transactions'[Actuality] ) = "AC", AcRevenue, FcRevenue)
			
			RETURN Result
			
			```
		formatString: 0
		displayFolder: HR
		lineageTag: 0e1daaa6-ab15-4133-a0ee-1326643b78cf

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Price Per Hour' = ```
			DIVIDE(CALCULATE([Correct Revenue], 
			KEEPFILTERS('Project Transactions'[TransactionType] = 1)),
			// FILTER('Project Transactions', [Correct Revenue] <> 0)),
			 [Billable Hours])
			```
		formatString: 0
		displayFolder: HR
		lineageTag: 265454e2-70a3-4e8c-a767-df320ff66a9f

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'Correct Gross Margin %' =
			
			
			VAR Revenue = [Correct Revenue]
			
			VAR GrossProfit = [Correct Revenue]+[Total Direct Costs]
			
			VAR GrossMarginPerc = DIVIDE(GrossProfit, [Correct Revenue])
			
			VAR Result = GrossMarginPerc
			
			RETURN GrossMarginPerc
		formatString: 0.00\ %;-0.00\ %;0.00\ %
		displayFolder: HR
		lineageTag: 03a85fd7-bdcd-4794-8713-8fcde3bccb48

	measure 'Correct Gross Profit 1 Hours' =
			
			VAR GrossProfit =
			    CALCULATE (
			        [4. ProjectRevenue_Cal_ContextTransitionToMonth] + [4. ProjectCost_Cal_ContextTransitionToMonth],
			        KEEPFILTERS ( 'Project Transactions'[TransactionType] = 1 ),
			        KEEPFILTERS ( 'Project Transactions'[EmploymentTypeId] IN { 1, 2, 3 } ),
			        KEEPFILTERS ( 'Project Transactions'[ProjectClassType] = 1 )
			    )
			VAR HourSubstraction =
			    CALCULATE (
			        [4. ProjectCost_Cal_ContextTransitionToMonth],
			        KEEPFILTERS ( 'Project Transactions'[ExpenseCode] = "98" )
			    )
			VAR Result = GrossProfit + HourSubstraction
			RETURN
			    Result
		formatString: #,0
		displayFolder: HR
		lineageTag: 7d112286-6332-4025-a3de-463db7b1bf92

	measure 'Gross Margin Hours %' =
			
			DIVIDE (
			    [Correct Gross Profit 1 Hours],
			    CALCULATE (
			        [Correct Revenue],
			        KEEPFILTERS ( 'Project Transactions'[TransactionType] = 1 )
			    )
			)
		formatString: 0.0\ %;-0.0\ %;0.0\ %
		displayFolder: HR
		lineageTag: 78898a1f-bb11-40f1-964c-cfc92c973994

	measure '4. AC PT_Cal_Rev_ContextTransitionToMonth' = ```
			
			    SUMX(
			        VALUES('Calendar'[Year Month]), [3. AC PT_Cal_YtdToMonth]
			    )
			```
		displayFolder: Project Transactions Revenue
		lineageTag: f7b3e701-a5e4-4924-bc29-0db5da244403

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '1. ProjectCost_Cal_AmountYtd' = ```
			
			    CALCULATE(
			        SUMX(
			            'Project Transactions', 
			            'Project Transactions'[TotalCost]
			        ), 
			        DATESYTD('Calendar'[Date])
			    )
			```
		displayFolder: KPIs
		lineageTag: f1f35301-f9f7-48d8-bb80-d19099a52748

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '2. ProjectCost_Cal_CurrencyConversion Sales (YTD)' =
			
			IF (
			    HASONEVALUE ( 'Reporting Currency'[SourceCurrency] ),
			    VAR ForecastVersion = SELECTEDVALUE('Project Transactions'[Actuality])
			    VAR AggregatedSalesInCurrency =
			        ADDCOLUMNS (
			            SUMMARIZE (
			                'Project Transactions',
			                'Calendar'[Year Month],    -- Monthly granularity
			                'Source Currency'[CurrencyId]
			            ),
			            "@SalesAmount", CALCULATE([1. ProjectCost_Cal_AmountYtd], 'Project Transactions'[Actuality] = ForecastVersion),
			            "@Rate", CALCULATE ( SELECTEDVALUE ( 'Monthly Exchange Rates'[Rate]),
			            'Monthly Exchange Rates'[Actuality] = ForecastVersion,
			            'Monthly Exchange Rates'[CurrencyType] = "M")
			        )
			    VAR Result =
			        SUMX (
			            AggregatedSalesInCurrency,
			            IF (
			                NOT ( ISBLANK ( [@Rate] ) ),
			                [@SalesAmount] / [@Rate],
			                "Missing Value"
			            )
			            )
			    RETURN
			        Result)
		displayFolder: KPIs
		lineageTag: 988d8814-b755-4630-bd90-577ad768cd81

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '3. ProjectCost_Cal_YtdToMonth' =
			
			IF(
			        AND(SELECTEDVALUE('Calendar'[Month Number]) >1, [2. ProjectCost_Cal_CurrencyConversion Sales (YTD)] <> 0),
			        [2. ProjectCost_Cal_CurrencyConversion Sales (YTD)]- CALCULATE(
			            [2. ProjectCost_Cal_CurrencyConversion Sales (YTD)],
			            PREVIOUSMONTH('Calendar'[Date])
			            ),
			        [2. ProjectCost_Cal_CurrencyConversion Sales (YTD)]
			    )
		displayFolder: KPIs
		lineageTag: b8f1c79b-e2ff-4d6d-a50c-ea9d46c2ea31

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '4. ProjectCost_Cal_ContextTransitionToMonth' = ```
			
			    SUMX(
			        VALUES('Calendar'[Year Month]), [3. ProjectCost_Cal_YtdToMonth]
			    )
			```
		displayFolder: KPIs
		lineageTag: 50295c2c-751a-4ee8-8a0d-28795a027fc0

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '1. ProjectRevenue_Cal_AmountYtd' = ```
			
			    CALCULATE(
			        SUMX(
			            'Project Transactions', 
			            'Project Transactions'[TotalRevenue]
			        ), 
			        DATESYTD('Calendar'[Date])
			    )
			```
		displayFolder: KPIs
		lineageTag: d8a91e58-cdf8-4c2d-b62c-d961d563aad5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)' =
			
			IF (
			    HASONEVALUE ( 'Reporting Currency'[SourceCurrency] ),
			    VAR ForecastVersion = SELECTEDVALUE('Project Transactions'[Actuality])
			    VAR AggregatedSalesInCurrency =
			        ADDCOLUMNS (
			            SUMMARIZE (
			                'Project Transactions',
			                'Calendar'[Year Month],    -- Monthly granularity
			                'Source Currency'[CurrencyId]
			            ),
			            "@SalesAmount", CALCULATE([1. ProjectRevenue_Cal_AmountYtd], 'Project Transactions'[Actuality] = ForecastVersion),
			            "@Rate", CALCULATE ( SELECTEDVALUE ( 'Monthly Exchange Rates'[Rate]),
			            'Monthly Exchange Rates'[Actuality] = ForecastVersion,
			            'Monthly Exchange Rates'[CurrencyType] = "M")
			        )
			    VAR Result =
			        SUMX (
			            AggregatedSalesInCurrency,
			            IF (
			                NOT ( ISBLANK ( [@Rate] ) ),
			                [@SalesAmount] / [@Rate],
			                "Missing Value"
			            )
			            )
			    RETURN
			        Result)
		displayFolder: KPIs
		lineageTag: c763d37f-b6ca-41b3-b201-6a61776f8b69

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '3. ProjectRevenue_Cal_YtdToMonth' =
			
			IF(
			        AND(SELECTEDVALUE('Calendar'[Month Number]) >1, [2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)] <> 0),
			        [2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)]- CALCULATE(
			            [2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)],
			            PREVIOUSMONTH('Calendar'[Date])
			            ),
			        [2. ProjectRevenue_Cal_CurrencyConversion Sales (YTD)]
			    )
		displayFolder: KPIs
		lineageTag: 03012860-eac3-49d9-850e-06afcbf6f424

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '4. ProjectRevenue_Cal_ContextTransitionToMonth' = ```
			
			    SUMX(
			        VALUES('Calendar'[Year Month]), [3. ProjectRevenue_Cal_YtdToMonth]
			    )
			```
		displayFolder: KPIs
		lineageTag: c6c2a72e-3af0-4fbf-bd11-86aba035a1bc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure SlicerFilter_CompaniesWithNoValues = INT( NOT ISEMPTY('P&L'))
		formatString: 0
		lineageTag: 9bb93c32-d7dd-41e4-857b-1f655196a6dc

	measure TextMeasure =
			
			
			VAR ActualityTxt   = SELECTEDVALUE ( ActualityOrgin[ActualityOrigin], "Multiple Versions" )
			VAR CurrTxt        = SELECTEDVALUE ( 'Reporting Currency'[SourceCurrency], "—" )
			VAR MinMonthIdx    = MIN ( 'Calendar'[Month Number] )
			VAR MaxMonthIdx    = MAX ( 'Calendar'[Month Number] )
			VAR SelectedMonths = COUNTROWS ( VALUES ( 'Calendar'[Month Number] ) )
			VAR ExpectedMonths = MaxMonthIdx - MinMonthIdx + 1
			VAR IsContiguous   = SelectedMonths = ExpectedMonths
			RETURN
			IF (
			    SelectedMonths = 0,
			    "No month selected",
			    IF (
			        IsContiguous,
			        "Now Presenting " & ActualityTxt & " in K" & CurrTxt & " "
			            & FORMAT ( MIN ( 'Calendar'[Date] ), "yyyy-MM-dd" ) & " - "
			            & FORMAT ( MAX ( 'Calendar'[Date] ), "yyyy-MM-dd" ),
			        "Now Presenting " & ActualityTxt & " in K" & CurrTxt
			            & " "
			            & CONCATENATEX (
			                VALUES ( 'Calendar'[Year Month] ),         -- t.ex. "2025-01"
			                'Calendar'[Year Month],
			                ", ",
			                'Calendar'[Year Month]                     -- sortera rätt
			            )
			    )
			)
			
			
			// "Now Presenting "&SELECTEDVALUE(ActualityOrgin[ActualityOrigin], "Multiple Versions")&" in K"&SELECTEDVALUE('Reporting Currency'[SourceCurrency]) &" "& FORMAT(MIN('Calendar'[Date]), "YYYY-MM-DD") &" - " & FORMAT(MAX('Calendar'[Date]), "YYYY-MM-DD")
		displayFolder: Project Transactions Revenue
		lineageTag: bc28df31-a7bb-4859-8c12-7e1bf51539a9

	measure FC+Actuals = ```
			IF(SELECTEDVALUE(Actuality[Actuality]) = "FC2", 
			CALCULATE([4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS(Actuality[ActualityId] ="AC") ,FILTER(ALL('Calendar'), 'Calendar'[Month Number] = 1))) 
			
			+ CALCULATE([4. P&L_Cal_ContextTransitionToMonth], Actuality[ActualityId] = "FC2")
			```
		displayFolder: Financials
		lineageTag: 475eecf5-f785-469e-b507-158e9dd11dad

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Full Year (AC + FC)' = ```
			
			VAR CurrentYear = YEAR ( MAX ( 'Calendar'[Date] ) )
			VAR YearStart   = DATE ( CurrentYear, 1, 1 )
			VAR YearEnd     = DATE ( CurrentYear, 12, 31 )
			VAR DatesInYear = DATESBETWEEN ( 'Calendar'[Date], YearStart, YearEnd )
			
			-- sista datum där AC faktiskt har värde inom året
			VAR LastACDateInYear =
			    CALCULATE (
			        MAX ( 'Calendar'[Date] ),
			        'P&L'[Actuality] = "AC",                 -- enkel kolumn=jämförelse funkar
			        DatesInYear,                              -- årsurval som tabellfilter
			        FILTER ( DatesInYear, NOT ISBLANK ( [Amount (AC)] ) )   -- måttvillkor i FILTER()
			    )
			
			VAR AC_Part =
			    IF (
			        NOT ISBLANK ( LastACDateInYear ),
			        CALCULATE ( [Amount (AC)], DATESBETWEEN ( 'Calendar'[Date], YearStart, LastACDateInYear ) )
			    )
			
			VAR FirstFCDate = IF ( NOT ISBLANK ( LastACDateInYear ), LastACDateInYear + 1, YearStart )
			
			VAR FC_Part =
			    CALCULATE ( [Amount (FC)], DATESBETWEEN ( 'Calendar'[Date], FirstFCDate, YearEnd ) )
			
			RETURN
			    AC_Part + FC_Part
			
			```
		displayFolder: Financials
		lineageTag: e0156f0b-1399-410d-9eb7-3763dc0c60a4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Remaining Forecast' =
			
			VAR LastDateWithSales =
			    CALCULATE (
			        CALCULATE(MAX ( 'P&L'[AccountingDate] ), KEEPFILTERS(Actuality[ActualityId] ="AC")),
			        ALL ( 'P&L' )
			    )
			VAR Result =
			        CALCULATE([4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS('P&L'[Actuality] ="FC2"),
			        KEEPFILTERS ( 'Calendar'[Date] > LastDateWithSales ))
			RETURN
			    Result
		formatString: General Date
		displayFolder: P&L Currency Conversions
		lineageTag: dbf612a5-9748-4e42-b646-1a04aa324c1a

	measure 'Amount (AC)' = ```
			
			CALCULATE ( [4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS ( 'P&L'[Actuality] = "AC" ) )
			
			```
		displayFolder: P&L Currency Conversions
		lineageTag: c6b74f14-6858-4699-a053-66f8817fd941

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Amount (BU)' =
			
			CALCULATE ( [4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS ( 'P&L'[Actuality] = "BU" ) )
		displayFolder: P&L Currency Conversions
		lineageTag: 7d605b4c-ab4a-4abc-a76e-e52beb2ee20a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Amount (FC - Selected)' =
			
			VAR v = SELECTEDVALUE ( 'P&L'[Actuality] )
			RETURN
			CALCULATE ( [4. P&L_Cal_ContextTransitionToMonth], KEEPFILTERS ( 'P&L'[Actuality] = v ) )
		displayFolder: P&L Currency Conversions
		lineageTag: 6ff9ceed-6419-49e6-b6cd-a9e0ab7cd237

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Monthly (AC or FC or BU by Version)' = ```
			
			VAR v         = SELECTEDVALUE ( 'P&L'[Actuality] )
			VAR MonthEnd  = EOMONTH ( MAX ( 'Calendar'[Date] ), 0 )
			VAR YearStart = DATE ( YEAR ( MonthEnd ), 1, 1 )
			
			-- cutoff från mappingtabellen (gäller endast FC1..FC12)
			VAR CutoffMonth =
			    LOOKUPVALUE ( ForecastVersionMap[CutoffMonth], ForecastVersionMap[Version], v )
			
			VAR CutoffEnd =
			    IF ( NOT ISBLANK ( CutoffMonth ) && CutoffMonth > 0,
			         EOMONTH ( YearStart, CutoffMonth - 1 ),
			         BLANK ()
			    )
			
			RETURN
			SWITCH (
			    TRUE (),
			    v = "AC", [Amount (AC)],
			    v = "BU", [Amount (BU)],
			
			    -- FC1: hel FC
			    NOT ISBLANK ( CutoffMonth ) && CutoffMonth = 0, [Amount (FC - Selected)],
			
			    -- FC2..FC12: AC t.o.m. cutoff, annars vald FC-version
			    NOT ISBLANK ( CutoffMonth ),
			        IF ( MonthEnd <= CutoffEnd, [Amount (AC)], [Amount (FC - Selected)] ),
			
			    -- fallback om inget är valt: visa AC
			    [Amount (AC)]
			)
			
			```
		displayFolder: P&L Currency Conversions
		lineageTag: 51b8d6a0-5dfc-4294-9a32-6b2949fe637d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Full Year (AC + FC or BU by Version)' = ```
			
			VAR v         = SELECTEDVALUE ( 'P&L'[Actuality] )
			VAR Anchor    = MAX ( 'Calendar'[Date] )
			VAR Y         = YEAR ( Anchor )
			VAR YearStart = DATE ( Y, 1, 1 )
			VAR YearEnd   = DATE ( Y, 12, 31 )
			
			VAR CutoffMonth =
			    LOOKUPVALUE ( ForecastVersionMap[CutoffMonth], ForecastVersionMap[Version], v )
			
			VAR CutoffEnd =
			    IF ( NOT ISBLANK ( CutoffMonth ) && CutoffMonth > 0,
			         EOMONTH ( YearStart, CutoffMonth - 1 ),
			         BLANK ()
			    )
			
			VAR AC_Part =
			    -- AC-del finns endast om CutoffMonth > 0 (dvs FC2..FC12)
			    IF (
			        NOT ISBLANK ( CutoffMonth ) && CutoffMonth > 0,
			        CALCULATE ( [Amount (AC)], DATESBETWEEN ( 'Calendar'[Date], YearStart, CutoffEnd ) )
			    )
			
			VAR FC_Part =
			    -- FC1: hela året FC
			    IF (
			        NOT ISBLANK ( CutoffMonth ) && CutoffMonth = 0,
			        CALCULATE ( [Amount (FC - Selected)], DATESBETWEEN ( 'Calendar'[Date], YearStart, YearEnd ) ),
			        -- FC2..FC12: FC från dagen efter cutoff t.o.m. YearEnd
			        IF (
			            NOT ISBLANK ( CutoffMonth ),
			            CALCULATE ( [Amount (FC - Selected)], DATESBETWEEN ( 'Calendar'[Date], CutoffEnd + 1, YearEnd ) )
			        )
			    )
			
			RETURN
			SWITCH (
			    TRUE (),
			    v = "AC",
			        CALCULATE ( [Amount (AC)], DATESBETWEEN ( 'Calendar'[Date], YearStart, YearEnd ) ),
			    v = "BU",
			        CALCULATE ( [Amount (BU)], DATESBETWEEN ( 'Calendar'[Date], YearStart, YearEnd ) ),
			    NOT ISBLANK ( CutoffMonth ),
			        COALESCE ( AC_Part, 0 ) + COALESCE ( FC_Part, 0 ),
			    -- fallback om inget är valt: visa helår AC
			    CALCULATE ( [Amount (AC)], DATESBETWEEN ( 'Calendar'[Date], YearStart, YearEnd ) )
			)
			
			```
		displayFolder: P&L Currency Conversions
		lineageTag: b9c15ebb-dcc1-4711-8943-fb4e1e76ac0e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	partition 'Measures Table' = m
		mode: import
		source =
				let
				    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i45WMlSKjQUA", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),
				    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", Int64.Type}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"Column1"})
				in
				    #"Removed Columns"

	annotation PBI_ResultType = Table

